{
  "builders": [
    {
      "type": "azure-arm",
      "client_id": "71d55aef-7440-4786-9159-acc4665c8540",
      "client_secret": "7~78Q~WF9wQT2fwBKedcAXSFCQt3a4yRooEUTc_f",
      "tenant_id": "aa63a79d-e55d-45b4-b483-4e8663476733",
      "subscription_id": "e325382e-9daf-452a-9aea-5a61b7329a0f",
      "managed_image_resource_group_name": "PackerFromAZVM",
      "managed_image_name": "WINDOWS2019New",
      "os_type": "Windows",
      "image_publisher": "MicrosoftWindowsServer",
      "image_offer": "WindowsServer",
      "image_sku": "2019-Datacenter",
      "communicator": "winrm",
      "winrm_port": "5986",
      "winrm_use_ssl": true,
      "winrm_insecure": true,
      "winrm_timeout": "20m",
      "winrm_username": "packer",
      "azure_tags": {
        "dept": "Devops",
        "task": "Image deployment"
      },
      "location": "Australia East",
      "vm_size": "Standard_B4ms"
    }
  ],
  "provisioners": [
    {
      "type": "powershell",
      "script": "./scripts/InstallAZmodule.ps1"
    },
    {
      "type": "powershell",
      "script": "./scripts/AzureCLI.ps1"
    },
    {
      "type": "powershell",
      "script": "./scripts/InstallADALSQL.ps1"
    },
    {
      "type": "powershell",
      "script": "./scripts/Install-VSBuildTools2022.ps1"
    },
    {
      "type": "powershell",
      "script": "./scripts/InstallSQLSSMS.ps1"
    },
    {
      "type": "powershell",
      "inline": [
        "while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }"
      ]
    },
    {
      "type": "windows-restart"
    },
    {
      "type": "powershell",
      "inline": [
        "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit /mode:vm",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
      ]
    }
  ]
}